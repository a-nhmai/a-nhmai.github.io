[
  {
    "objectID": "Mini-Project2.html",
    "href": "Mini-Project2.html",
    "title": "Mini Project 2",
    "section": "",
    "text": "This is from my Data Science 2 class where we focused on scraping data from a website. My partner Gracia and I chose some Boston Marathon data.\nWe ran into some fun issues and made functions due to there being a lack of a marathon in 2020 and non-binary becoming a category for self-identification in 2022."
  },
  {
    "objectID": "Mini-Project2.html#checking-for-any-lists-with-less-than-5-elements",
    "href": "Mini-Project2.html#checking-for-any-lists-with-less-than-5-elements",
    "title": "Mini Project 2",
    "section": "Checking for any lists with less than 5 elements",
    "text": "Checking for any lists with less than 5 elements\n\nYears 2014-2017 do not have 5 tables like 2018-2024.\nAdditionally, 2020 did not have any data (likely because of COVID).\n\n\ncheck_year &lt;- function(years) {\n    problematic_years &lt;- list()  # List to store problematic years with fewer than 5 tables\n\n    for (year in years) {\n        Sys.sleep(2)  # Pause to avoid overloading the server\n        url &lt;- stringr::str_c(\"http://registration.baa.org/\", year, \"/cf/Public/iframe_Statistics.htm\")\n        \n        # Start polite session and scrape the webpage\n        session &lt;- bow(url, force = TRUE)\n        stats &lt;- scrape(session) |&gt;\n            html_nodes(css = \"table\")  # Scrape all tables\n        \n        # Check if there are exactly 5 tables\n        if (length(stats) &lt; 5) {\n            problematic_years[[length(problematic_years) + 1]] &lt;- \n                paste(\"Year\", year, \"doesn't have exactly 5 tables. Found\", length(stats), \"tables.\")\n        }\n    }\n    \n    # If there are any problematic years, print them; otherwise, print a success message\n    if (length(problematic_years) &gt; 0) {\n        message(\"Issues found in the following years:\")\n        print(problematic_years)\n    } else {\n        message(\"All years passed the table count check.\")\n    }\n}\n\nyear_test &lt;- 2014:2024\nyear_check &lt;- purrr::map(year_test, check_year)"
  },
  {
    "objectID": "Mini-Project2.html#checking-the-table-for-the-error-years",
    "href": "Mini-Project2.html#checking-the-table-for-the-error-years",
    "title": "Mini Project 2",
    "section": "Checking the table for the error years",
    "text": "Checking the table for the error years\n\nTable 4 is needed rather than table 5\n\n\nsession &lt;- bow(\"http://registration.baa.org/2014/cf/Public/iframe_Statistics.htm\", force = TRUE)\n\nresult &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\nNo encoding supplied: defaulting to UTF-8.\n\nrunning &lt;- result[[4]]"
  },
  {
    "objectID": "Mini-Project2.html#code-that-provided-error-with-purrrmap-function-that-prompted-the-error-fixing-above",
    "href": "Mini-Project2.html#code-that-provided-error-with-purrrmap-function-that-prompted-the-error-fixing-above",
    "title": "Mini Project 2",
    "section": "Code that provided error with purrr:map function that prompted the error fixing above",
    "text": "Code that provided error with purrr:map function that prompted the error fixing above\n\nby_year &lt;- function(year){\n    Sys.sleep(2)\n    url &lt;- str_c(\"http://registration.baa.org/\", year, \"/cf/Public/iframe_Statistics.htm\")\n    session &lt;- bow(url, force = TRUE)\n    stats &lt;- scrape(session) |&gt;\n        html_nodes(css = \"table\") |&gt;\n        html_table(header = TRUE, fill = TRUE)\n    stats[[5]] |&gt; \n    dplyr::slice(c(3, 4, 5, 6)) |&gt;\n    janitor::clean_names() |&gt;\n    mutate(across(2:4, as.numeric),\n           percent_finished = parse_number(percent_finished),\n           year = year)\n    }\n\nyears &lt;- 2014:2024\n#boston_10yrs_data &lt;- purrr::map(years, check_year)\n#boston_10years &lt;- list_rbind(boston_10years_data)"
  },
  {
    "objectID": "Mini-Project2.html#new-code-for-dealing-with-abnormal-years",
    "href": "Mini-Project2.html#new-code-for-dealing-with-abnormal-years",
    "title": "Mini Project 2",
    "section": "New code for dealing with abnormal years",
    "text": "New code for dealing with abnormal years\n\nby_year2 &lt;- function(year) {\n    Sys.sleep(2)\n    \n    # Skip the year 2020\n    if (year == 2020) {\n        message(paste(\"Skipping year\", year))\n        return(NULL)  # Exit the function\n    }\n    \n    url &lt;- str_c(\"http://registration.baa.org/\", year, \"/cf/Public/iframe_Statistics.htm\")\n    session &lt;- bow(url, force = TRUE)\n    stats &lt;- scrape(session) |&gt;\n        html_nodes(css = \"table\") |&gt;\n        html_table(header = TRUE, fill = TRUE)\n    \n    # Select the appropriate table based on the year\n    if (year &gt;= 2014 & year &lt;= 2017) {\n        selected_table &lt;- stats[[4]]  # Use the 4th table for 2014-2017\n    } else {\n        selected_table &lt;- stats[[5]]  # Use the 5th table for all other years\n    }\n    \n    # Process the selected table\n    selected_table |&gt;\n        dplyr::slice(c(3, 4, 5, 6)) |&gt;\n        janitor::clean_names() |&gt;\n        mutate(across(2:4, as.numeric),\n               percent_finished = parse_number(percent_finished),\n               year = year)\n}\n\nyears &lt;- 2014:2024\n#boston_10yrs_data &lt;- purrr::map(years, by_year2)\n#boston_10years &lt;- list_rbind(boston_10years_data)"
  },
  {
    "objectID": "Mini-Project2.html#now-the-issue-is-that-non-binary-was-not-an-option-until-2022-causing-errors-in-the-slice-and-across-functions-fixed-code-for-this",
    "href": "Mini-Project2.html#now-the-issue-is-that-non-binary-was-not-an-option-until-2022-causing-errors-in-the-slice-and-across-functions-fixed-code-for-this",
    "title": "Mini Project 2",
    "section": "Now the issue is that non-binary was not an option until 2022, causing errors in the slice and across functions – fixed code for this",
    "text": "Now the issue is that non-binary was not an option until 2022, causing errors in the slice and across functions – fixed code for this\n\nby_year3 &lt;- function(year) {\n    Sys.sleep(2)\n    \n    # Skip the year 2020\n    if (year == 2020) {\n        message(paste(\"Skipping year\", year))\n        return(NULL)  # Exit the function\n    }\n    \n    url &lt;- stringr::str_c(\"http://registration.baa.org/\", year, \"/cf/Public/iframe_Statistics.htm\")\n    session &lt;- bow(url, force = TRUE)\n    stats &lt;- scrape(session) |&gt;\n        html_nodes(css = \"table\") |&gt;\n        html_table(header = TRUE, fill = TRUE)\n    \n    # Select the appropriate table based on the year\n    if (year &gt;= 2014 & year &lt;= 2017) {\n        selected_table &lt;- stats[[4]]  # Use the 4th table for 2014-2017\n    } else {\n        selected_table &lt;- stats[[5]]  # Use the 5th table for other years\n    }\n    \n    # Slice different rows based on the year range\n    if (year &gt;= 2014 & year &lt;= 2022) {\n        sliced_table &lt;- selected_table |&gt; \n            dplyr::slice(c(3, 4, 5))  # Slice rows 3 to 5 for 2014-2022\n    } else {\n        sliced_table &lt;- selected_table |&gt; \n            dplyr::slice(c(3, 4, 5, 6))  # Slice rows 3 to 6 for other years\n    }\n    \n    # Process the sliced table\n    sliced_table |&gt;\n        janitor::clean_names() |&gt;\n        mutate(across(2:4, as.numeric),\n               percent_finished = parse_number(percent_finished),\n               year = year)\n}\n\nyears &lt;- 2014:2024\nboston_10yrs_data &lt;- purrr::map(years, by_year3)\n\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\n\n\nSkipping year 2020\n\n\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\nNo encoding supplied: defaulting to UTF-8.\n\nboston_10years &lt;- list_rbind(boston_10yrs_data)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MaiPage",
    "section": "",
    "text": "Pronunciation  /on my/\nPronouns  she/her\nAbout  Prospective statistical ecology graduate student\n4th-year Environmental Studies Major (Natural Science) at St. Olaf College\nConcentrations in:  Statistics and Data Science  Race and Ethnic Studies\nConnect with me for more information about the construction of this website.\nDon’t like the theme? Click the switch on top right!"
  },
  {
    "objectID": "index.html#anh-mai",
    "href": "index.html#anh-mai",
    "title": "MaiPage",
    "section": "",
    "text": "Pronunciation  /on my/\nPronouns  she/her\nAbout  Prospective statistical ecology graduate student\n4th-year Environmental Studies Major (Natural Science) at St. Olaf College\nConcentrations in:  Statistics and Data Science  Race and Ethnic Studies\nConnect with me for more information about the construction of this website."
  },
  {
    "objectID": "Mini-Project1.html",
    "href": "Mini-Project1.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "Overview\nThis was a project for my Data Science 2 class in which we were asked to make maps, both static and interactive on data of our choosing. To see the specific code I utilized, please visit my GitHub and fin the Mini-Project1.qmd!\nSources of my data;\n\nstate dataset (weed policy) – R US State Facts and Figures\nspecies dataset – https://ecos.fws.gov/ecp/report/species-listings-by-state-totals?statusCategory=Listed\n\n\n\nStatic Map of Species Spatial Range\n\nspecies_states_polygon |&gt;\n  ggplot(aes(x = long, y = lat, group = group))+\n  geom_polygon(aes(fill = numSpecies), color = \"black\")+\n  theme_void()+\n  scale_fill_viridis()+\n  labs(title = \"Listed species with current spatial range believed to or known to occur in states \\n across the US\",\n    fill = \"Number of listed species\",\n    subtitle = \"Data from https://ecos.fws.gov/ecp/report/species-listings-by-state-totals?statusCategory=Listed\",\n    caption = \"This map shows there is a high number of species believed to have spatial range \\n associated with California and regions in the South. More Northern regions have a lower number\\n of species listed. This data may be limited to sampling accessibility and data collection biases. \\nAdditionally, this map excludes Hawaii which has 490 listed species and Alaska with 8 listed species.\")\n\n\n\n\n\n\n\n\n\n\nInteractive Map of Species Spatial Range\n\n#I wanted to make labels that would show up when someone interacts with the map.\n#It coordinates to the name of the state as well as the number of species listed. \nspecies_states_sf &lt;- species_states_sf |&gt;\n  mutate(labels = str_c(name, \" - \", numSpecies, \" species listed\"))\n\nleaflet(species_states_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 0.8,\n    color = \"black\",  \n    fillColor = ~colorNumeric(\"Greens\", numSpecies)(numSpecies),\n    dashArray = \"2\",\n    fillOpacity = 1,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~labels,  # Use the labels directly\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) |&gt;\n  addControl(\"&lt;strong&gt;Listed species with current spatial range believed to or known to occur in states across the US&lt;/strong&gt;\", position = \"topright\") |&gt;\n  addControl(\"From this map, we see a large concentration of species with current spatial ranges in California and southern regions of the United States. There is a possibility that more sampling occurs in these areas and can inflate species observations. Thus, this map should not be taken as a biodiversity distribution map.\", position = \"bottomleft\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n\n\n\n\n\n\n\n\nStatic Plot of US State Weed Policy\nAlt-Text for this Plot\n\nThis is a map of the continental United States that shows the policy of weed by state. Lighter colors indicate legislation that is pending or has ruled for the illegalization of weed. Darker colors indicate the legalization of medicinal weed or entire decriminalization of weed. On the West coast, there is a pattern of decriminalization whereas most Midwestern or Southern states have ruled for weed to be illegal. On the East coast, near the New England area, more states are ruling for the decriminalization of cannibas as well.\n\n\nweed_law_polygon |&gt;\n  ggplot(aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = pot_policy), color = \"black\")+\n  coord_map() +\n  theme_void() +\n  scale_fill_manual(values = c(\"#ffffcc\", \"#c2e699\", \"#78c679\", \"#31a354\", \"#006837\"))+\n  labs(title = \"Weed Policy\",\n       caption = \"Data from R Package [Poliscidata]\",\n       fill = \"Status\")\n\n\n\n\n\n\n\n\n\n\nInteractive Plot of US State Weed Policy\n\nlibrary(RColorBrewer)\n\n# Define color palette based on pot_policy\nfactpal &lt;- colorFactor(\n  palette = c(\"#ffffcc\", \"#c2e699\", \"#78c679\", \"#31a354\", \"#006837\"),\n  domain = weed_law_states_sf$pot_policy\n)\n\n# Ensure weed_law_states_sf is in the correct projection (WGS84)\nweed_law_states_sf &lt;- st_transform(weed_law_states_sf, crs = 4326)\n\n# Define labels as a character vector, not a list\nlabels &lt;- paste(\n  \"&lt;strong&gt;\", weed_law_states_sf$state_name, \"&lt;/strong&gt;&lt;br/&gt;Policy: \", weed_law_states_sf$pot_policy\n)\n\nWarning: Unknown or uninitialised column: `state_name`.\n\n# Create leaflet map\nleaflet(weed_law_states_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~factpal(pot_policy),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = labels,  # Now a character vector\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) |&gt;\n  addLegend(\n    pal = factpal,\n    values = ~pot_policy,\n    opacity = 0.7,\n    title = \"Weed Policy Status\",\n    position = \"bottomright\"\n  ) |&gt;\n  addControl(\"&lt;strong&gt;Weed Law Status across the U.S.&lt;/strong&gt;\", position = \"topright\") |&gt;\n  addControl(\"This map shows the weed law rulings across the U.S. Western states tend to have legalized and decriminalized weed, while Southern and Midwestern states often have illegal rulings or ongoing litigation.\", position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  },
  {
    "objectID": "GCRUS-PPT.html",
    "href": "GCRUS-PPT.html",
    "title": "Link",
    "section": "",
    "text": "Link\nhttps://docs.google.com/presentation/d/1ifIMaqcic9OmGnzlPMHFjjoLyWobOehU/edit?usp=sharing&ouid=102764289066186735377&rtpof=true&sd=true"
  }
]